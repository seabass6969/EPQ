
@online{macleod_abracadabra_nodate,
	title = {abracadabra: How does Shazam work? - Cameron {MacLeod}},
	url = {https://www.cameronmacleod.com/blog/how-does-shazam-work},
	shorttitle = {abracadabra},
	author = {{MacLeod}, Cameron},
	urldate = {2024-10-28},
	langid = {english},
	file = {Snapshot:/home/cephas/Zotero/storage/LYURUIEI/how-does-shazam-work.html:text/html},
}

@online{noauthor_stanford_nodate,
	title = {Stanford Engineering Everywhere {\textbar} {EE}261 - The Fourier Transform and its Applications {\textbar} Lecture 7 - Review Of Fourier Transform (And Inverse) Definitions},
	url = {https://see.stanford.edu/Course/EE261/114},
	urldate = {2024-10-28},
	file = {Stanford Engineering Everywhere | EE261 - The Fourier Transform and its Applications | Lecture 7 - Review Of Fourier Transform (And Inverse) Definitions:/home/cephas/Zotero/storage/V99DY5GP/114.html:text/html},
}

@article{heckbert_fourier_nodate,
	title = {Fourier Transforms and the Fast Fourier Transform ({FFT}) Algorithm},
	author = {Heckbert, Paul},
	langid = {english},
	file = {PDF:/home/cephas/Zotero/storage/LTLP8KF4/Heckbert - Fourier Transforms and the Fast Fourier Transform (FFT) Algorithm.pdf:application/pdf},
}

@article{wang_industrial-strength_2003,
	title = {An Industrial-Strength Audio Search Algorithm},
	author = {Wang, Avery Li-Chun},
	date = {2003-01},
	langid = {english},
	file = {PDF:/home/cephas/Zotero/storage/RQ6E6ET6/Wang - An Industrial-Strength Audio Search Algorithm.pdf:application/pdf},
}

@online{noauthor_calculus_nodate,
	title = {Calculus {II} - Improper Integrals},
	url = {https://tutorial.math.lamar.edu/classes/calcii/improperintegrals.aspx},
	urldate = {2024-10-28},
}

@online{noauthor_denoising_nodate,
	title = {Denoising Data with {FFT} [Python] - {YouTube}},
	url = {https://www.youtube.com/watch?v=s2K1JfNR7Sc},
	urldate = {2024-10-28},
}

@article{virtanen_scipy_2020,
	title = {{SciPy} 1.0: fundamental algorithms for scientific computing in Python},
	volume = {17},
	rights = {2020 The Author(s)},
	issn = {1548-7105},
	url = {https://www.nature.com/articles/s41592-019-0686-2},
	doi = {10.1038/s41592-019-0686-2},
	shorttitle = {{SciPy} 1.0},
	abstract = {{SciPy} is an open-source scientific computing library for the Python programming language. Since its initial release in 2001, {SciPy} has become a de facto standard for leveraging scientific algorithms in Python, with over 600 unique code contributors, thousands of dependent packages, over 100,000 dependent repositories and millions of downloads per year. In this work, we provide an overview of the capabilities and development practices of {SciPy} 1.0 and highlight some recent technical developments.},
	pages = {261--272},
	number = {3},
	journaltitle = {Nature Methods},
	shortjournal = {Nat Methods},
	author = {Virtanen, Pauli and Gommers, Ralf and Oliphant, Travis E. and Haberland, Matt and Reddy, Tyler and Cournapeau, David and Burovski, Evgeni and Peterson, Pearu and Weckesser, Warren and Bright, Jonathan and van der Walt, Stéfan J. and Brett, Matthew and Wilson, Joshua and Millman, K. Jarrod and Mayorov, Nikolay and Nelson, Andrew R. J. and Jones, Eric and Kern, Robert and Larson, Eric and Carey, C. J. and Polat, İlhan and Feng, Yu and Moore, Eric W. and {VanderPlas}, Jake and Laxalde, Denis and Perktold, Josef and Cimrman, Robert and Henriksen, Ian and Quintero, E. A. and Harris, Charles R. and Archibald, Anne M. and Ribeiro, Antônio H. and Pedregosa, Fabian and van Mulbregt, Paul},
	urldate = {2024-10-28},
	date = {2020-03},
	langid = {english},
	note = {Publisher: Nature Publishing Group},
	keywords = {Biophysical chemistry, Computational biology and bioinformatics, Technology},
	file = {Full Text PDF:/home/cephas/Zotero/storage/2GQXKBNK/Virtanen et al. - 2020 - SciPy 1.0 fundamental algorithms for scientific computing in Python.pdf:application/pdf},
}

@article{hunter_matplotlib_2007,
	title = {Matplotlib: A 2D graphics environment},
	volume = {9},
	doi = {10.1109/MCSE.2007.55},
	pages = {90--95},
	number = {3},
	journaltitle = {Computing in Science \& Engineering},
	author = {Hunter, John D.},
	date = {2007},
}

@video{3blue1brown_but_2018,
	title = {But what is the Fourier Transform?  A visual introduction.},
	url = {https://www.youtube.com/watch?v=spUNpyF58BY},
	shorttitle = {But what is the Fourier Transform?},
	abstract = {An animated introduction to the Fourier Transform.
Help fund future projects:   / 3blue1brown  
An equally valuable form of support is to simply share some of the videos.
Special thanks to these supporters: http://3b1b.co/fourier-thanks
Learn more about Janestreet: https://janestreet.com/3b1b

Follow-on video about the uncertainty principle:    • The more general uncertainty principl...  

Interactive made by a viewer inspired by this video:
https://prajwalsouza.github.io/Experi...

Also, take a look at this Jupyter notebook implementing this idea in a way you can play with:
https://github.com/{thatSaneKid}/fourie...

Thanks to these viewers for their contributions to translations
Hebrew: Omer Tuchfeld
Russian: {xX}-Masik-Xx
Vietnamese: @ngvutuan2811

------------------
Animations largely made using manim, a scrappy open-source python library.  https://github.com/3b1b/manim

If you want to check it out, I feel compelled to warn you that it's not the most well-documented tool, and has many other quirks you might expect in a library someone wrote with only their own use in mind.

Music by Vincent Rubinetti.
Download the music on Bandcamp:
https://vincerubinetti.bandcamp.com/a...

Stream the music on Spotify:
https://open.spotify.com/album/1dVyjw...

If you want to contribute translated subtitles or to help review those that have already been made by others and need approval, you can click the gear icon in the video and go to subtitles/cc, then "add subtitles/cc".  I really appreciate those who do this, as it helps make the lessons accessible to more people.
------------------

3blue1brown is a channel about animating math, in all senses of the word animate.  And you know the drill with {YouTube}, if you want to stay posted on new videos, subscribe, and click the bell to receive notifications (if you're into that).

If you are new to this channel and want to see more, a good place to start is this playlist: http://3b1b.co/recommended

Various social media stuffs:
Website: https://www.3blue1brown.com
Twitter:   / 3blue1brown  
Patreon:   / 3blue1brown  
Facebook:   / 3blue1brown  
Reddit:   / 3blue1brown},
	author = {{3Blue1Brown}},
	urldate = {2024-10-28},
	date = {2018-01-26},
}

@video{steve_brunton_fast_2020,
	title = {The Fast Fourier Transform Algorithm},
	url = {https://www.youtube.com/watch?v=toj_IoCQE-4},
	abstract = {Here I discuss the Fast Fourier Transform ({FFT}) algorithm, one of the most important algorithms of all time.  

Book Website: http://databookuw.com 
Book {PDF}: http://databookuw.com/databook.pdf

These lectures follow Chapter 2 from:
"Data-Driven Science and Engineering: Machine Learning, Dynamical Systems, and Control"  by Brunton and Kutz

Amazon: https://www.amazon.com/Data-Driven-Sc...

Brunton Website: eigensteve.com

This video was produced at the University of Washington},
	author = {{Steve Brunton}},
	urldate = {2024-10-29},
	date = {2020-04-04},
	keywords = {Explain\_fourier\_transform},
}

@inreference{noauthor_eulers_2024,
	title = {Euler's formula},
	rights = {Creative Commons Attribution-{ShareAlike} License},
	url = {https://en.wikipedia.org/w/index.php?title=Euler%27s_formula&oldid=1247828798},
	booktitle = {Wikipedia},
	urldate = {2024-11-07},
	date = {2024-09-26},
	langid = {english},
	note = {Page Version {ID}: 1247828798},
	file = {PDF:/home/cephas/Zotero/storage/IJIXCBWC/2024 - Euler's formula.pdf:application/pdf;Snapshot:/home/cephas/Zotero/storage/UTDLGEQL/Euler's_formula.html:text/html},
}

@software{mcfee_librosalibrosa_2024,
	title = {librosa/librosa: 0.10.2.post1},
	rights = {{ISC} License},
	url = {https://zenodo.org/doi/10.5281/zenodo.591533},
	shorttitle = {librosa/librosa},
	abstract = {What's Changed



Bump minimum matplotlib to 3.5.0 by @bmcfee in https://github.com/librosa/librosa/pull/1839


Full Changelog: https://github.com/librosa/librosa/compare/0.10.2...0.10.2.post1},
	version = {0.10.2.post1},
	publisher = {Zenodo},
	author = {{McFee}, Brian and Matt {McVicar} and Daniel Faronbi and Iran Roman and Matan Gover and Stefan Balke and Scott Seyfarth and Ayoub Malek and Colin Raffel and Vincent Lostanlen and Benjamin van Niekirk and Dana Lee and Frank Cwitkowitz and Frank Zalkow and Oriol Nieto and Dan Ellis and Jack Mason and Kyungyun Lee and Bea Steers and Emily Halvachs and Carl Thomé and Fabian Robert-Stöter and Rachel Bittner and Ziyao Wei and Adam Weiss and Eric Battenberg and Keunwoo Choi and Ryuichi Yamamoto and {CJ} Carr and Alex Metsai and Stefan Sullivan and Pius Friesch and Asmitha Krishnakumar and Shunsuke Hidaka and Steve Kowalik and Fabian Keller and Dan Mazur and Alexandre Chabot-Leclerc and Curtis Hawthorne and Chandrashekhar Ramaprasad and Myungchul Keum and Juanita Gomez and Will Monroe and Viktor Andreevitch Morozov and Kian Eliasi and nullmightybofo and Paul Biberstein and N. Dorukhan Sergin and Romain Hennequin and Rimvydas Naktinis and beantowel and Taewoon Kim and Jon Petter Åsen and Joon Lim and Alex Malins and Darío Hereñú and Stef van der Struijk and Lorenz Nickel and Jackie Wu and Zhen Wang and Tim Gates and Matt Vollrath and Andy Sarroff and Xiao-Ming and Alastair Porter and Seth Kranzler and Voodoohop and Mattia Di Gangi and Helmi Jinoz and Connor Guerrero and Abduttayyeb Mazhar and toddrme2178 and Zvi Baratz and Anton Kostin and Xinlu Zhuang and Cash {TingHin} Lo and Pavel Campr and Eric Semeniuc and Monsij Biswal and Shayenne Moura and Paul Brossier and Hojin Lee and Waldir Pimenta},
	urldate = {2024-11-07},
	date = {2024-05-14},
	doi = {10.5281/ZENODO.591533},
}

@patent{wang_systems_2013,
	title = {Systems and methods for recognizing sound and music signals in high noise and distortion},
	url = {https://patents.google.com/patent/US8386258B2/en?assignee=Shazam+Investments+Ltd&num=25},
	holder = {Shazam Investments Ltd},
	type = {patentus},
	number = {8386258B2},
	author = {Wang, Avery Li-Chun and {III}, Julius O. Smith},
	urldate = {2024-12-25},
	date = {2013-02-26},
	langid = {english},
	keywords = {buffer, content, media, media samples, segment},
	file = {Full Text PDF:/home/cephas/Zotero/storage/GBCEPAGL/Wang and III - 2013 - Systems and methods for recognizing sound and music signals in high noise and distortion.pdf:application/pdf},
}

@software{ffmpeg_developers_ffmpeg_nodate,
	title = {ffmpeg: A complete, cross-platform solution to record, convert and stream audio and video},
	rights = {{GNU} Lesser General Public License ({LGPL}) version 2.1 or later},
	url = {https://www.ffmpeg.org/},
	shorttitle = {{FFmpeg}},
	version = {n7.1},
	author = {{FFmpeg developers}},
}

@article{harris_array_2020,
	title = {Array programming with {NumPy}},
	volume = {585},
	issn = {0028-0836, 1476-4687},
	url = {https://www.nature.com/articles/s41586-020-2649-2},
	doi = {10.1038/s41586-020-2649-2},
	abstract = {Abstract
            
              Array programming provides a powerful, compact and expressive syntax for accessing, manipulating and operating on data in vectors, matrices and higher-dimensional arrays. {NumPy} is the primary array programming library for the Python language. It has an essential role in research analysis pipelines in fields as diverse as physics, chemistry, astronomy, geoscience, biology, psychology, materials science, engineering, finance and economics. For example, in astronomy, {NumPy} was an important part of the software stack used in the discovery of gravitational waves
              1
              and in the first imaging of a black hole
              2
              . Here we review how a few fundamental array concepts lead to a simple and powerful programming paradigm for organizing, exploring and analysing scientific data. {NumPy} is the foundation upon which the scientific Python ecosystem is constructed. It is so pervasive that several projects, targeting audiences with specialized needs, have developed their own {NumPy}-like interfaces and array objects. Owing to its central position in the ecosystem, {NumPy} increasingly acts as an interoperability layer between such array computation libraries and, together with its application programming interface ({API}), provides a flexible framework to support the next decade of scientific and industrial analysis.},
	pages = {357--362},
	number = {7825},
	journaltitle = {Nature},
	shortjournal = {Nature},
	author = {Harris, Charles R. and Millman, K. Jarrod and Van Der Walt, Stéfan J. and Gommers, Ralf and Virtanen, Pauli and Cournapeau, David and Wieser, Eric and Taylor, Julian and Berg, Sebastian and Smith, Nathaniel J. and Kern, Robert and Picus, Matti and Hoyer, Stephan and Van Kerkwijk, Marten H. and Brett, Matthew and Haldane, Allan and Del Río, Jaime Fernández and Wiebe, Mark and Peterson, Pearu and Gérard-Marchant, Pierre and Sheppard, Kevin and Reddy, Tyler and Weckesser, Warren and Abbasi, Hameer and Gohlke, Christoph and Oliphant, Travis E.},
	urldate = {2025-01-12},
	date = {2020-09-17},
	langid = {english},
	file = {Full Text:/home/cephas/Zotero/storage/ZRJUZX3D/Harris et al. - 2020 - Array programming with NumPy.pdf:application/pdf},
}

@inproceedings{miller_audio_2002,
	location = {St.Thomas, {VI}, {USA}},
	title = {Audio fingerprinting: nearest neighbor search in high dimensional binary spaces},
	isbn = {978-0-7803-7713-4},
	url = {http://ieeexplore.ieee.org/document/1203277/},
	doi = {10.1109/MMSP.2002.1203277},
	shorttitle = {Audio fingerprinting},
	eventtitle = {2002 {IEEE} 5th Workshop on Multimedia Signal Processing},
	pages = {182--185},
	booktitle = {2002 {IEEE} Workshop on Multimedia Signal Processing.},
	publisher = {{IEEE}},
	author = {Miller, M.L. and Rodriguez, M.A. and Cox, I.J.},
	urldate = {2025-01-15},
	date = {2002},
	file = {PDF:/home/cephas/Zotero/storage/ICYYNE53/Miller et al. - 2002 - Audio fingerprinting nearest neighbor search in high dimensional binary spaces.pdf:application/pdf},
}

@article{yang_music_2001,
	title = {Music Database Retrieval Based on Spectral Similarity},
	abstract = {We present an efﬁcient algorithm to retrieve similar music pieces from an audio database. The algorithm tries to capture the intuitive notion of similarity perceived by human: two pieces are similar if they are fully or partially based on the same score, even if they are performed by different people or at different speed.},
	author = {Yang, Cheng},
	date = {2001},
	langid = {english},
	file = {PDF:/home/cephas/Zotero/storage/EUN9XN2P/Yang - Music Database Retrieval Based on Spectral Similarity.pdf:application/pdf},
}

@article{yang_music_2001-1,
	title = {Music Database Retrieval Based on Spectral Similarity},
	abstract = {We present an efﬁcient algorithm to retrieve similar music pieces from an audio database. The algorithm tries to capture the intuitive notion of similarity perceived by human: two pieces are similar if they are fully or partially based on the same score, even if they are performed by different people or at different speed.},
	author = {Yang, Cheng},
	date = {2001},
	langid = {english},
	file = {PDF:/home/cephas/Zotero/storage/MWVGLTUB/Yang - Music Database Retrieval Based on Spectral Similarity.pdf:application/pdf},
}

@inreference{noauthor_hash_2024,
	title = {Hash function},
	rights = {Creative Commons Attribution-{ShareAlike} License},
	url = {https://simple.wikipedia.org/w/index.php?title=Hash_function&oldid=9718140},
	abstract = {A Hash function is a set of things to do to make an output that is always the same length from some other input data. Hash functions can be used to tell a computer that two things are the same without sending the things twice. Hash functions use all the data they can to change the output. The input can be only a little bit different, and have a totally different output. When a hash function is made, care is taken to make sure two different inputs do not get the same hash value (this is called a hash collision).
A cryptographic hash function is a kind of hash function that is used in cryptography. It is made to make it hard to make two files with the same hash even if you try. It may also be called a 'message digest', 'digital fingerprint', 'digest' or 'checksum'.},
	booktitle = {Simple English Wikipedia, the free encyclopedia},
	urldate = {2025-01-30},
	date = {2024-08-22},
	langid = {english},
	note = {Page Version {ID}: 9718140},
	file = {Snapshot:/home/cephas/Zotero/storage/FYRZH586/Hash_function.html:text/html},
}

@inreference{noauthor_distributed_2024,
	title = {Distributed computing},
	rights = {Creative Commons Attribution-{ShareAlike} License},
	url = {https://en.wikipedia.org/w/index.php?title=Distributed_computing&oldid=1266361966#cite_note-tanenbaum-1},
	abstract = {Distributed computing is a field of computer science that studies distributed systems, defined as computer systems whose inter-communicating components are located on different networked computers. 
The components of a distributed system communicate and coordinate their actions by passing messages to one another in order to achieve a common goal. Three significant challenges of distributed systems are: maintaining concurrency of components, overcoming the lack of a global clock, and managing the independent failure of components. When a component of one system fails, the entire system does not fail. Examples of distributed systems vary from {SOA}-based systems to microservices to massively multiplayer online games to peer-to-peer applications. Distributed systems cost significantly more than monolithic architectures, primarily due to increased needs for additional hardware, servers, gateways, firewalls, new subnets, proxies, and so on. Also, distributed systems are prone to fallacies of distributed computing. On the other hand, a well designed distributed system is more scalable, more durable, more changeable and more fine-tuned than a monolithic application deployed on a single machine. According to Marc Brooker: "a system is scalable in the range where marginal cost of additional workload is nearly constant." Serverless technologies fit this definition but the total cost of ownership, and not just the infra cost must be considered.
A computer program that runs within a distributed system is called  a distributed program, and distributed programming is the process of writing such programs. There are many different types of implementations for the message passing mechanism, including pure {HTTP}, {RPC}-like connectors and message queues.
Distributed computing also refers to the use of distributed systems to solve computational problems. In distributed computing, a problem is divided into many tasks, each of which is solved by one or more computers, which communicate with each other via message passing.},
	booktitle = {Wikipedia},
	urldate = {2025-01-23},
	date = {2024-12-31},
	langid = {english},
	note = {Page Version {ID}: 1266361966},
	file = {Snapshot:/home/cephas/Zotero/storage/LWM3NGLI/Distributed_computing.html:text/html},
}

@online{noauthor_avery_nodate,
	title = {Avery Wang - Member Board Of Trustees @ {SETI} Institute - Crunchbase Person Profile},
	url = {https://www.crunchbase.com/person/avery-wang},
	abstract = {Avery Wang has over 20 years of industry experience designing high-performance multimedia signal processing systems for the consumer market ...},
	titleaddon = {Crunchbase},
	urldate = {2025-01-23},
	langid = {english},
	file = {Snapshot:/home/cephas/Zotero/storage/Y5YU6IS7/avery-wang.html:text/html},
}
